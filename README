==========================================================================
RISC-V Cross-Compiler
==========================================================================
# Author  : Andrew Waterman, Yunsup Lee
# Date    : November 11, 2011
# Version : (under version control)

This is the RISC-V C and C++ cross-compiler. It supports two build modes:
a generic ELF/Newlib toolchain and a more sophisticated Linux-ELF/glibc
toolchain.  The latter is also the basis for the RISC-V Akaros cross-
compiler, which is kept separately in the Akaros repository.

To build the Newlib cross-compiler, pick an install path.  If you choose,
say, /opt/riscv, then add /opt/riscv/bin to your PATH now.  Then, simply
run the following command:

 % ./configure --prefix=/opt/riscv
 % make

You should now be able to use riscv-gcc and its cousins.


To build the Linux cross-compiler, pick an install path.  If you choose,
say, /opt/riscv, then add /opt/riscv/bin to your PATH now.  Then, simply
run the following command:

 % ./configure --prefix=/opt/riscv
 % make linux


To build the native RISC-V compiler (to be running on RISC-V systems, e.g.
Linux/RISC-V), first build the Linux cross-compiler (described above).

Patch GCC to define SSIZE_MAX.

 % patch -p1 < native-patches/native-host-linux.patch

Build binutils and gcc, specifying the installation directory as your 
target system root as SYSROOT. If you choose, say, /opt/riscv/sysroot, 
binaries will be installed into /opt/riscv/sysroot/bin. To build, run
the following command:

 % make native SYSROOT=/opt/riscv/sysroot

